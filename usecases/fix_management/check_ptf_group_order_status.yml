# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

# Description:
  # The playbook is to provide an example about how to check PTF group order status since the downloading may take several minutes to hours depends on the
  # size of the package and the network condition. Waiting until the downloading completes may not always be a wise option. This playbook can be used as a
  # scheduler job in your system, check the downloading status and update them as needed.

# Parameters:
  # repo_server -- The IBM i server which can use SNDPTFORD to download and store PTF and PTF group install files.

# Command example:
  # ansible-playbook ./check_ptf_group_order_status.yml -e "{'repo_server': 'reposerver'}"
---
- name: Playbook to check PTF group order status
  hosts: "{{ repo_server | default([]) }}"
  gather_facts: false

  tasks:
   - name: Set facts
     ansible.builtin.set_fact:
      downloading_order_info_list: []
      downloading_order_id_list: []
      complete_order_id_list: []
      formatted_order_list: []

   - name: Retrieve fix orders in downloading status
     ibm.power_ibmi.ibmi_fix_repo:
      action: "find"
      type: 'download_status'
      checksum: false
      parameters:
       - {'download_status': 'DOWNLOADING'}
     register: result

   - name: Block to check whether finished downloading
     when: result.success_list is not defined
     block:
      - name: Print msg
        ansible.builtin.debug:
         msg: "No downloading order found, quit play!"

      - name: End play
        ansible.builtin.meta: end_play

   - name: Block to check status
     block:
      - name: Retrieve downloading order information list
        ansible.builtin.set_fact:
         downloading_order_info_list: '{{ result.success_list }}'

      - name: Compose downloading order id list
        ansible.builtin.set_fact:
         downloading_order_id_list: "{{ downloading_order_id_list|default([]) + [ order_info.order_id ] }}"
        loop: '{{ downloading_order_info_list }}'
        loop_control:
         loop_var: order_info

      - name: Check ptf group order status
        ibm.power_ibmi.ibmi_download_fix_status:
         order_list: '{{ downloading_order_id_list }}'
        register: result_ds

      - name: Compose complete order id list
        ansible.builtin.set_fact:
         complete_order_id_list: "{{ complete_order_id_list|default([]) + [ order.order_id ] }}"
        loop: '{{ result_ds.status }}'
        loop_control:
         loop_var: order
        when: order.download_status == 'DOWNLOADED'

      - name: Compose parameters to update order download status
        ansible.builtin.set_fact:
         formatted_order_list:
          "{{ formatted_order_list|default([]) +
          [{ 'order_id': order_info.order_id, 'file_path': order_info.file_path, 'download_status': 'DOWNLOADED' }] }}"
        when: order_info.order_id in complete_order_id_list
        loop: '{{ downloading_order_info_list }}'
        loop_control:
         loop_var: order_info

      - name: Update download_status table to mark download_status as downloaded
        ibm.power_ibmi.ibmi_fix_repo:
         action: "update"
         type: 'download_status'
         checksum: true
         parameters: '{{ formatted_order_list }}'

      - name: Update ptf group's information into ptf_group_image_info table in catalog
        ansible.builtin.include_role:
         name: fix_repo_extract_ptf_group_info
        loop: '{{ complete_order_id_list }}'
        loop_control:
         loop_var: fix_repo_extract_ptf_group_info_order_id
        when: result.success_list is defined

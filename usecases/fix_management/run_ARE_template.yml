# Copyright (c) IBM Corporation 2021, 2021
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name: Playbook to run ARE template on the clients
  # This playbook will send ARE template from server to clients, run it and print the result summary.
  # All the results files will be transferred back to the server

  # Command example: ansible-playbook ./run_ARE_template.yml
  # -e "{'ARE_clients': 'systemA', 'template_server': 'templateserver', 'template_name': '/tmp/PTF_SI71234.jar', 'ARE_results_dir_server': '/tmp/results'}"
  hosts: "{{ ARE_clients | default([]) }}"
  gather_facts: true
  strategy: linear

  vars:
    template_server: "{{ template_server }}"
    template_name: "{{ template_name }}"
    template_dir_on_client: "{{ template_dir_client | default('/etc/ibmi_ansible/fix_management/ARE/templates') }}"
    are_results_dir_on_client: "{{ ARE_results_dir_client | default('/etc/ibmi_ansible/fix_management/ARE/results') }}"
    are_results_name_on_client: "{{ ARE_results_name_client | default(template_name | basename | splitext | first + '.out') }}"
    are_results_dir_on_server: "{{ ARE_results_dir_server }}"
    remove_are_template_on_client: "{{ remove_ARE_template_client | default(true) }}"

  tasks:
    - name: Check if template file exists on the server
      block:
        - name: Check if template file exists on the server    # noqa: run-once[task]
          ansible.builtin.stat:
            path: '{{ template_name }}'
          register: src_template_status
          delegate_to: "{{ template_server }}"
          run_once: true

        - name: Handle missing template file
          when: not src_template_status.stat.exists
          block:
            - name: Skip when template file does not exist
              ansible.builtin.debug:
                msg: "{{ 'Template file ' + template_name + ' does not exist, end host.' }}"

            - name: End host
              ansible.builtin.meta: end_host

    - name: Create subdirectory under are_results_dir_on_server to indicate which system the ARE result file is from
      block:
        - name: Check if ARE results directory exists on the server    # noqa: run-once[task]
          ansible.builtin.stat:
            path: "{{ are_results_dir_on_server }}"
          register: results_dir_server_status
          delegate_to: "{{ template_server }}"
          run_once: true

        - name: Create ARE results directory on the server if it does not exist    # noqa: run-once[task]
          ansible.builtin.file:
            path: "{{ are_results_dir_on_server }}"
            state: directory
            mode: "0755"
          register: results_dir_server_result
          delegate_to: "{{ template_server }}"
          ignore_errors: true
          run_once: true
          when: not results_dir_server_status.stat.exists

        - name: Set subdirectory for each client under ARE results directory on the server
          ansible.builtin.set_fact:
            are_results_fulldir_server: "{{ are_results_dir_on_server }}/{{ ansible_hostname }}"

        - name: Check if subdirectory under ARE results directory exists on the server    # noqa: run-once[task]
          ansible.builtin.stat:
            path: "{{ are_results_fulldir_server | replace('//', '/') }}"
          register: results_dir_server_fullpath_status
          delegate_to: "{{ template_server }}"
          run_once: true

        - name: Create subdirectory on the server if it does not exist    # noqa: run-once[task]
          ansible.builtin.file:
            path: "{{ are_results_fulldir_server | replace('//', '/') }}"
            state: directory
            mode: "0755"
          register: results_dir_server_fullpath_result
          delegate_to: "{{ template_server }}"
          ignore_errors: true
          run_once: true
          when: not results_dir_server_fullpath_status.stat.exists

    - name: Transfer ARE template to the client
      when: src_template_status.stat.exists
      block:
        - name: Check if template directory specified exist on the client
          ansible.builtin.stat:
            path: "{{ template_dir_on_client }}"
          register: dest_template_dir_status

        - name: Create template directory on the client if it does not exist
          ansible.builtin.file:
            path: "{{ template_dir_on_client }}"
            state: directory
            mode: "0755"
          register: dest_file_result
          ignore_errors: true
          when: not dest_template_dir_status.stat.exists

        - name: Handle failure with creating template directory
          when: not dest_template_dir_status.stat.exists and dest_file_result.failed == 1
          block:
            - name: Skip when creating template directory failed
              ansible.builtin.debug:
                msg: "{{ 'Make template dir ' + template_dir_on_client + ' fail, end host.' }}"

            - name: End host
              ansible.builtin.meta: end_host

        - name: Perform transfer
          when: template_name != "" and dest_template_dir_status.stat.exists
          block:
            - name: Transfer ARE template to the client
              ibm.power_ibmi.ibmi_synchronize_files:
                src_list:
                  - {'src': '{{ template_name }}', 'dest':'{{ template_dir_on_client }}'}
              delegate_to: "{{ template_server }}"
              ignore_errors: true
              register: sync_result

            - name: Handle transfer failure
              when: sync_result.rc != 0
              block:
                - name: Skip when transfer failed
                  ansible.builtin.debug:
                    msg: "template file transfer failed, quit ARE action."

                - name: End host
                  ansible.builtin.meta: end_host

    - name: Run ARE on the client
      block:
        - name: Check if ARE results directory exists on the client
          ansible.builtin.stat:
            path: '{{ are_results_dir_on_client }}'
          register: results_dir_status

        - name: Create ARE results directory on the client if it does not exist
          ansible.builtin.file:
            path: "{{ are_results_dir_on_client }}"
            state: directory
            mode: "0755"
          register: are_results_dir_result
          ignore_errors: true
          when: not results_dir_status.stat.exists

        - name: Handle failure in creating ARE results directory
          when: not results_dir_status.stat.exists and are_results_dir_result.failed == 1
          block:
            - name: Skip when creating ARE results directory failed
              ansible.builtin.debug:
                msg: "{{ 'Make template dir ' + are_results_dir_on_client + ' fail, end host.' }}"

            - name: End host
              ansible.builtin.meta: end_host

        - name: Set full name of ARE results files
          ansible.builtin.set_fact:
            are_results_client: "{{ are_results_dir_on_client }}/{{ are_results_name_on_client }}"

        - name: Run ARE script   # noqa: command-instead-of-shell
          ansible.builtin.shell:
          args:
            cmd: "/QIBM/ProdData/OS/OSGi/healthcheck/bin/runARE.sh -template {{ template_name | basename }} \
                  -outFile {{ are_results_client | replace('//', '/') }} || /qopensys/usr/bin/true"
            chdir: "{{ template_dir_on_client }}"
            executable: /qopensys/usr/bin/qsh
          changed_when: true
          register: template_results

        - name: Get current timestamp
          ansible.builtin.set_fact:
            are_results_name_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: Handle ARE results
      block:
        - name: Check if ARE result file file_name.summary.txt, i.e PTF_SI71234.out.summary.txt, exists
          ansible.builtin.stat:
            path: "{{ are_results_client | replace('//', '/') }}.summary.txt"
          register: are_result_summary_status

        - name: Check if ARE result file file_name, i.e PTF_SI71234.out, exists
          ansible.builtin.stat:
            path: "{{ are_results_client | replace('//', '/') }}"
          register: are_result_out_status

        - name: Check if ARE result file file_name.xml, i.e PTF_SI71234.out.xml, exists
          ansible.builtin.stat:
            path: "{{ are_results_client | replace('//', '/') }}.xml"
          register: are_result_xml_status

        - name: Transfer ARE result file file_name.summary.txt to server
          when: are_result_summary_status.stat.exists
          block:
            - name: Transfer ARE result file file_name.summary.txt from client to server
              ibm.power_ibmi.ibmi_sync_files:
                src_list:
                  - {'src': '{{ are_results_client | replace("//", "/") }}.summary.txt', 'dest': '{{ are_results_fulldir_server | replace("//", "/") }}'}
                remote_host: '{{ hostvars[template_server]["ansible_ssh_host"] }}'
                remote_user: '{{ hostvars[template_server]["ansible_ssh_user"] }}'
                private_key: '/home/{{ ansible_ssh_user }}/.ssh/id_rsa'
              ignore_errors: true
              register: sync_are_result_summary_status

            - name: Skip when transfer ARE result file file_name.summary.txt failed
              ansible.builtin.debug:
                msg: "ARE result file \
                     {{ are_results_client | basename }}.summary.txt \
                     transfer failed."
              when: sync_are_result_summary_status.rc != 0

            - name: Handle ARE result file *.summary.txt on the server
              when: sync_are_result_summary_status.rc == 0
              block:
                - name: Set the file name by adding timestamp
                  ansible.builtin.set_fact:
                    are_result_name_summary: "{{ are_results_client | replace('//', '/') | basename | splitext | \
                                              first }}_{{ are_results_name_timestamp }}{{ are_results_client | \
                                              replace('//', '/') | basename | splitext | last }}.summary.txt"
                - name: Add timestamp in the file name, i.e PTF_SI71234_20211111T035045.out.summary.txt    # noqa: command-instead-of-shell
                  ansible.builtin.shell: "mv {{ are_results_client | replace('//', '/') | basename }}.summary.txt {{ are_result_name_summary }}"
                  args:
                    chdir: "{{ are_results_fulldir_server | replace('//', '/') }}"
                  delegate_to: "{{ template_server }}"
                  changed_when: true

                - name: Print the result content
                  block:
                    - name: Read ARE result content in the summary file
                      ansible.builtin.command: "cat {{ are_result_name_summary }}"
                      args:
                        chdir: "{{ are_results_fulldir_server | replace('//', '/') }}"
                      delegate_to: "{{ template_server }}"
                      register: are_result_summary_content
                      changed_when: false

                    - name: Print the ARE result content
                      ansible.builtin.debug:
                        msg:
                          - '**************************************************'
                          - '*                  ARE result                    *'
                          - '**************************************************'
                          - "{{ are_result_summary_content.stdout_lines }}"

        - name: Transfer ARE result file to the server
          when: are_result_out_status.stat.exists
          block:
            - name: Transfer ARE result file file_name from client to server
              ibm.power_ibmi.ibmi_sync_files:
                src_list:
                  - {'src': '{{ are_results_client | replace("//", "/") }}', 'dest': '{{ are_results_fulldir_server | replace("//", "/") }}'}
                remote_host: '{{ hostvars[template_server]["ansible_ssh_host"] }}'
                remote_user: '{{ hostvars[template_server]["ansible_ssh_user"] }}'
                private_key: '/home/{{ ansible_ssh_user }}/.ssh/id_rsa'
              ignore_errors: true
              register: sync_are_result_out_status

            - name: Skip when transfer ARE result file file_name failed
              ansible.builtin.debug:
                msg: "ARE result file \
                     {{ are_results_client | basename }} \
                     transfer failed."
              when: sync_are_result_out_status.rc != 0

            - name: Adding timestamp to file name
              when: sync_are_result_out_status.rc == 0
              block:
                - name: Set the file name by adding timestamp
                  ansible.builtin.set_fact:
                    are_result_name_out: "{{ are_results_client | replace('//', '/') | basename | splitext | first \
                                          }}_{{ are_results_name_timestamp }}{{ are_results_client | replace('//', '/') \
                                          | basename | splitext | last }}"

                - name: Add timestamp in the file name, i.e PTF_SI71234_20211111T035045.out    # noqa: command-instead-of-shell
                  ansible.builtin.shell: mv "{{ are_results_client | replace('//', '/') | basename }}" "{{ are_result_name_out }}"
                  args:
                    chdir: "{{ are_results_fulldir_server | replace('//', '/') }}"
                  delegate_to: "{{ template_server }}"
                  changed_when: true

        - name: Transfer ARE result file file_name.xml to server
          when: are_result_xml_status.stat.exists
          block:
            - name: Transfer ARE result file file_name.xml from client to server
              ibm.power_ibmi.ibmi_sync_files:
                src_list:
                  - {'src': '{{ are_results_client | replace("//", "/") }}.xml', 'dest': '{{ are_results_fulldir_server | replace("//", "/") }}'}
                remote_host: '{{ hostvars[template_server]["ansible_ssh_host"] }}'
                remote_user: '{{ hostvars[template_server]["ansible_ssh_user"] }}'
                private_key: '/home/{{ ansible_ssh_user }}/.ssh/id_rsa'
              ignore_errors: true
              register: sync_are_result_xml_status

            - name: Skip when transfer ARE result file file_name.xml failed
              ansible.builtin.debug:
                msg: "ARE result file transfer \
                     {{ are_results_client | basename }}.xml \
                     transfer failed."
              when: sync_are_result_xml_status.rc != 0

            - name: Add timestamp to file name
              when: sync_are_result_xml_status.rc == 0
              block:
                - name: Set the file name by adding timestamp
                  ansible.builtin.set_fact:
                    are_result_name_xml: "{{ are_results_client | replace('//', '/') | basename | splitext | first \
                                         }}_{{ are_results_name_timestamp }}{{ are_results_client | replace('//', '/') \
                                         | basename | splitext | last }}.xml"

                - name: Add timestamp in the file name, i.e PTF_SI71234_20211111T035045.out.xml    # noqa: command-instead-of-shell
                  ansible.builtin.shell: "mv {{ are_results_client | replace('//', '/') | basename }}.xml {{ are_result_name_xml }}"
                  args:
                    chdir: "{{ are_results_fulldir_server | replace('//', '/') }}"
                  delegate_to: "{{ template_server }}"
                  changed_when: true

    - name: Remove ARE template file on the client if needed
      when: remove_are_template_on_client
      block:
        - name: Set ARE template file which will be removed on the client
          ansible.builtin.set_fact:
            template_to_remove: "{{ template_dir_on_client }}/{{ template_name | basename}}"

        - name: Remove ARE template file on the client if needed
          ansible.builtin.file:
            path: "{{template_to_remove | replace('//', '/')}}"
            state: absent

# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

# Description:
  # This playbook is used for 1st level solution. It will get the individual ptfs' information in catalog. Then call check_ptf role
  # to check which ptfs are not already applied or loaded on the target system. Then call sync_apply_individual_ptfs_lv1 role to transfer
  # the unloaded or unapplied ptfs to the target system. Then load and apply.

# Parameters:
  # repo_server           -- The IBM i/Linux server stores PTFs and PTF groups.
  # target_system         -- The target IBM i server that receives and applies the PTFs.
  # ptfs_list             -- Specifies the PTFs' list.
  # delete                -- Specifies whether or not to delete the file install dir on target server after apply. The default value is true.
  # image_root            -- Specifies the image files' dir on the repo_server. This should be the root dir of all the image files.
  # apply_all_loaded_ptfs -- Controls whether all loaded ptf will be applied. The default value is true.
  # temp_or_perm          -- Controls whether the target PTFs will be permanent applied or temporary applied. Value can be  '*TEMP' or '*PERM'.
  #                          Default value is '*TEMP'.
  # delayed_option        -- Controls whether the PTF is delayed apply or not. Value can be '*YES', '*NO' or '*IMMDLY'. Default value is '*IMMDLY'.
  # auto_ipl              -- Controls whether an immediate reboot will be launched automatically if at least one ptf requests an IPL for permanent applied or
  #                          temporary applied. The default value is false.

# Output:
  # all_ptf_status     -- All input ptf's status
  # apply_fail_list    -- Apply failed ptf list
  # apply_success_list -- Apply successful ptf list
  # not_in_catalog     -- The list of ptfs which information is not in the catalog

# Command example:
  # ansible-playbook ./sync_apply_individual_ptfs_lv1.yml -e
  #    "{'target_system': 'systemA', 'repo_server': 'systemB', 'image_root': '/home/test/PTF', 'ptfs_list': ['SI67856', 'SI69375', 'SI73751'],
  #        'apply_all_loaded_ptfs': true, 'temp_or_perm': '*TEMP', 'delayed_option': '*IMMDLY', 'auto_ipl': false, 'delete': true}"
---
- name: Sync and apply a list of individual ptfs
  hosts: '{{ target_system | default([]) }}'
  gather_facts: false

  vars:
    repo_server: "{{ repo_server }}"
    ptfs_list: "{{ ptfs_list }}"
    image_root: "{{ image_root }}"

  tasks:
    - name: Init varibles
      ansible.builtin.set_fact:
        check_ptf_list: []

    - name: Compose ptf id list
      ansible.builtin.set_fact:
        ptf_id_list: "{{ ptf_id_list | default([]) + [{'ptf_id': ptfs_list_var}] }}"
      loop: "{{ ptfs_list }}"
      loop_control:
        loop_var: ptfs_list_var

    - name: Refresh PTF DB information in catalog
      ibm.power_ibmi.ibmi_fix_repo_lv1:
        image_root: "{{ image_root }}"
        action: "refresh"
      delegate_to: "{{ repo_server }}"
      register: fix_repo_refresh_result

    - name: Print the PTF group refresh result
      ansible.builtin.debug:
        var: fix_repo_refresh_result

    - name: Include fix_repo_lv1_find_individual_ptf role to recursively find individual ptfs in catalog
      ansible.builtin.include_role:
        name: fix_repo_lv1_find_individual_ptf
      vars:
        fix_repo_lv1_find_individual_ptf_ptfs_list: "{{ ptfs_list }}"
        fix_repo_lv1_find_individual_ptf_src_host: "{{ repo_server }}"
        fix_repo_lv1_find_individual_ptf_image_root: "{{  image_root }}"

    - name: Fail condition
      ansible.builtin.fail:
        msg: "No available individual ptf in catalog, quit."
      when: fix_repo_lv1_find_individual_ptf_ptf_find_result == []

    - name: Call compose_check_ptf_list.yml to compose check_ptf_list
      ansible.builtin.include_tasks: compose_check_ptf_list.yml
      loop: "{{ fix_repo_lv1_find_individual_ptf_ptf_find_result }}"
      loop_control:
        loop_var: ptf_find_result_var

    - name: Print check_ptf_list
      ansible.builtin.debug:
        var: check_ptf_list

    - name: Include check_ptf role to determine which ptfs need to apply
      ansible.builtin.include_role:
        name: check_ptf

    - name: No ptfs need to be applied
      when: check_ptf_not_loaded_ptfs_list == [] and check_ptf_loaded_ptfs_list == []
      block:
        - name: No individual ptf need to be applied msg
          ansible.builtin.debug:
            msg: "No individual ptf need to be applied, quit."

        - name: End host
          ansible.builtin.meta: end_host

    - name: Include sync_apply_individual_ptfs_lv1 role to transfer a list of individual ptfs to target ibm i, then load and apply
      ansible.builtin.include_role:
        name: sync_apply_individual_ptfs_lv1
      vars:
        sync_apply_individual_ptfs_lv1_not_loaded_list: "{{ check_ptf_not_loaded_ptfs_list }}"
        sync_apply_individual_ptfs_lv1_src_host: "{{ repo_server }}"
        sync_apply_individual_ptfs_lv1_already_loaded_list: "{{ check_ptf_loaded_ptfs_list }}"
        sync_apply_individual_ptfs_lv1_delete: "{{ delete }}"
        sync_apply_individual_ptfs_lv1_apply_all_loaded_ptf: "{{ apply_all_loaded_ptfs }}"
        sync_apply_individual_ptfs_lv1_temp_or_perm: "{{ temp_or_perm }}"
        sync_apply_individual_ptfs_lv1_delayed_option: "{{ delayed_option }}"
        sync_apply_individual_ptfs_lv1_auto_ipl: "{{ auto_ipl }}"

    - name: Include check_ptf role again to get the final applied result
      ansible.builtin.include_role:
        name: check_ptf
      vars:
        check_ptf_list: "{{ ptf_id_list }}"
        check_ptf_check_product: false

    - name: Compose final result
      ansible.builtin.set_fact:
        final_result: "{{ {'not_in_catalog': fix_repo_lv1_find_individual_ptf_ptf_fail_list,
                           'apply_success_list': sync_apply_individual_ptfs_lv1_apply_success_list,
                           'apply_fail_list': sync_apply_individual_ptfs_lv1_apply_fail_list,
                           'all_ptf_status': check_ptf_ptfs_status} }}"

    - name: Print final ptfs status
      ansible.builtin.debug:
        var: final_result

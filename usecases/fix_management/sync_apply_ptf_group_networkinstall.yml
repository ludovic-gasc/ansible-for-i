# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

# Description:
  # This playbook is used for 2nd level solution. It will get the PTF group information in catalog.
  # Then call sync_apply_ptf_group_networkinstall role to install PTF group on the target system.
  # sync_apply_ptf_group_networkinstall role will setup network install env on repo server and use network install mechanism
  # to install the PTF group on the target system.

# Parameters:
  # repo_server   -- The IBM i server which can use SNDPTFORD to download and store PTF and PTF group install files.
  # target_system -- The target IBM i server that receives and applies the PTF group.
  # ptf_group     -- The information of the PTF groups to be synced and applied on the target. ptf_group_number and ptf_group_level are required.
  # ptf_omit_list -- The list of PTFs which will be omitted. The elements of the list are dict. The key of the dict should be the product ID
  #                  of the fix that is omitted.

# Notes:
  # *SRVLAN must be configured before use. Please refer to "https://www.ibm.com/docs/en/i/7.5?topic=server-configuring-service-tools-dst".

# Command example:
  # ansible-playbook ./sync_apply_ptf_group_networkinstall.yml -e "{'target_system': 'systemA', 'repo_server': 'reposerver', 'ptf_group':
  #     {'ptf_group_number':'SF99740', 'ptf_group_level':'20121'}, 'ptf_omit_list': [{'5770SS1': 'SI78582'}, {'5770ss1': 'SI78544'}]}"
---
- name: Using remote network install mechanism to install the PTF group on target system
  hosts: '{{ target_system | default([]) }}'
  gather_facts: false

  vars:
    repo_server: "{{ repo_server }}"
    ptf_group: "{{ ptf_group }}"

  tasks:
    - name: Get the PTF group information in catalog
      ibm.power_ibmi.ibmi_fix_repo:
        type: "ptf_group"
        checksum: true
        action: "find"
        parameters:
          - "{{ {'ptf_group_number': ptf_group.ptf_group_number, \
             'ptf_group_level': ptf_group.ptf_group_level | default(omit), \
             'release_date': ptf_group.release_date | default(omit), 'additional_param':'ORDER BY release_date LIMIT 1'} }}"
      delegate_to: "{{ repo_server }}"
      register: fix_repo_find_result

    - name: Print the PTF group information
      ansible.builtin.debug:
        var: fix_repo_find_result

    - name: Check that PTF group information is in the catalog
      when: fix_repo_find_result.success_list is not defined or fix_repo_find_result.success_list == []
      block:
        - name: Debug msg
          ansible.builtin.debug:
            msg: "PTF group information is not in catalog, quit."
        - name: End host
          ansible.builtin.meta: end_host

    - name: Get the PTF group information in download_status table, in case the order is still downloading
      ibm.power_ibmi.ibmi_fix_repo:
        type: "download_status"
        action: "find"
        parameters:
          - "{{ {'ptf_group_number': ptf_group.ptf_group_number, \
             'ptf_group_level': ptf_group.ptf_group_level | default(omit), \
             'release_date': ptf_group.release_date | default(omit), \
             'additional_param':'ORDER BY release_date LIMIT 1'} }}"
      delegate_to: "{{ repo_server }}"
      register: download_status_find_result

    - name: Print the download_status table information
      ansible.builtin.debug:
        var: download_status_find_result

    - name: Check whether still downloading PTF group
      when: download_status_find_result.success_list[0].download_status == 'downloading'
      block:
        - name: Debug msg
          ansible.builtin.debug:
            msg: "The newest PTF group is still downloading, quit."
        - name: End host
          ansible.builtin.meta: end_host

    - name: Compose apply list
      ansible.builtin.set_fact:
        ptf_group_information: "{{ fix_repo_find_result.success_list[0] }}"

    - name: Include sync_apply_ptf_group_networkinstall role to install PTF group on target ibm i
      ansible.builtin.include_role:
        name: sync_apply_ptf_group_networkinstall
      vars:
        sync_apply_ptf_group_networkinstall_ptf_group_info: "{{ ptf_group_information }}"
        sync_apply_ptf_group_networkinstall_src_host: "{{ repo_server }}"
        sync_apply_ptf_group_networkinstall_ptf_omit_list: "{{ ptf_omit_list }}"
